{"ast":null,"code":"import _asyncToGenerator from \"/Users/appic/Desktop/ChatGPT-Angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Configuration, OpenAIApi } from 'openai';\nimport { environment } from 'src/environments/environment';\nimport { gptModels } from '../models/constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\n\nfunction CustomerSupportComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\", 14);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const item_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", item_r2.cssClass);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", item_r2.person, \" : \", ctx_r0.getText(item_r2.response), \" \");\n  }\n}\n\nfunction CustomerSupportComponent_img_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 15);\n  }\n}\n\nexport let CustomerSupportComponent = /*#__PURE__*/(() => {\n  class CustomerSupportComponent {\n    constructor() {\n      this.chatConversation = [];\n      this.gptModels = gptModels;\n      this.promptText = '';\n      this.showSpinner = false;\n    }\n\n    ngOnInit() {}\n\n    checkResponse() {\n      this.pushChatContent(this.promptText, 'You', 'person');\n      this.invokeGPT();\n    }\n\n    pushChatContent(content, person, cssClass) {\n      const chatToPush = {\n        person: person,\n        response: content,\n        cssClass: cssClass\n      };\n      this.chatConversation.push(chatToPush);\n    }\n\n    getText(data) {\n      return data.split('\\n').filter(f => f.length > 0);\n    }\n\n    invokeGPT() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this.promptText.length < 2) return;\n\n        try {\n          _this.response = undefined;\n          let configuration = new Configuration({\n            apiKey: environment.apiKey\n          });\n          let openai = new OpenAIApi(configuration);\n          let requestData = {\n            model: 'text-davinci-003',\n            prompt: _this.promptText,\n            temperature: 0.95,\n            max_tokens: 150,\n            top_p: 1.0,\n            frequency_penalty: 0.0,\n            presence_penalty: 0.0\n          };\n          _this.showSpinner = true;\n          let apiResponse = yield openai.createCompletion(requestData);\n          _this.response = apiResponse.data;\n\n          _this.pushChatContent(_this.response.choices[0].text.trim(), 'Mr Bot', 'bot');\n\n          debugger;\n          _this.showSpinner = false;\n        } catch (error) {\n          _this.showSpinner = false; // Consider adjusting the error handling logic for your use case\n\n          if (error.response) {\n            console.error(error.response.status, error.response.data);\n          } else {\n            console.error(`Error with OpenAI API request: ${error.message}`);\n          }\n        }\n      })();\n    }\n\n  }\n\n  CustomerSupportComponent.ɵfac = function CustomerSupportComponent_Factory(t) {\n    return new (t || CustomerSupportComponent)();\n  };\n\n  CustomerSupportComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CustomerSupportComponent,\n    selectors: [[\"app-customer-support\"]],\n    decls: 23,\n    vars: 3,\n    consts: [[1, \"container\"], [1, \"row\"], [1, \"col-md-12\"], [1, \"card\"], [1, \"card-header\", \"center\", \"text-primary\"], [1, \"card-body\"], [1, \"card-title\", \"text-success\", \"center\"], [1, \"col-md-2\"], [1, \"col-md-8\"], [1, \"frame-box\"], [4, \"ngFor\", \"ngForOf\"], [\"src\", \"../../assets/ZNeT.gif\", \"width\", \"50px\", \"height\", \"50px\", 4, \"ngIf\"], [\"row\", \"3\", \"cols\", \"15\", \"placeholder\", \"Start by asking what you are looking for\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [1, \"btn\", \"btn-primary\", \"push-right\", 3, \"click\"], [1, \"card-text\", \"padding\", 3, \"ngClass\"], [\"src\", \"../../assets/ZNeT.gif\", \"width\", \"50px\", \"height\", \"50px\"]],\n    template: function CustomerSupportComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n        i0.ɵɵelement(3, \"br\");\n        i0.ɵɵelementStart(4, \"div\", 3)(5, \"h4\", 4);\n        i0.ɵɵtext(6, \"Chatting With Mr BOT powered by ChatGPT\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 5)(8, \"h6\", 6);\n        i0.ɵɵtext(9, \"You are now chatting with Mr.BOT by ChatGPT\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\", 1);\n        i0.ɵɵelement(11, \"div\", 7);\n        i0.ɵɵelementStart(12, \"div\", 8)(13, \"div\", 9);\n        i0.ɵɵtemplate(14, CustomerSupportComponent_div_14_Template, 3, 3, \"div\", 10);\n        i0.ɵɵelementStart(15, \"div\");\n        i0.ɵɵtemplate(16, CustomerSupportComponent_img_16_Template, 1, 0, \"img\", 11);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(17, \"br\");\n        i0.ɵɵelementStart(18, \"textarea\", 12);\n        i0.ɵɵlistener(\"ngModelChange\", function CustomerSupportComponent_Template_textarea_ngModelChange_18_listener($event) {\n          return ctx.promptText = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(19, \"br\");\n        i0.ɵɵelementStart(20, \"button\", 13);\n        i0.ɵɵlistener(\"click\", function CustomerSupportComponent_Template_button_click_20_listener() {\n          return ctx.checkResponse();\n        });\n        i0.ɵɵtext(21, \"Send\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(22, \"div\", 7);\n        i0.ɵɵelementEnd()()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(14);\n        i0.ɵɵproperty(\"ngForOf\", ctx.chatConversation);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.showSpinner);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngModel\", ctx.promptText);\n      }\n    },\n    dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel],\n    styles: [\".push-right[_ngcontent-%COMP%]{margin-left:90%}.person[_ngcontent-%COMP%]{font-style:italic;font-weight:700;color:purple}.bot[_ngcontent-%COMP%]{font-weight:700;color:#006400}.frame-box[_ngcontent-%COMP%]{border:dotted 2px orange;padding:20px;min-height:400px;max-height:400px;overflow-y:scroll}.padding[_ngcontent-%COMP%]{padding:5px}\"]\n  });\n  return CustomerSupportComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}