{"ast":null,"code":"import _asyncToGenerator from \"/Users/appic/Desktop/ChatGPT-Angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Configuration, OpenAIApi } from \"openai\";\nimport { environment } from 'src/environments/environment';\nimport { gptModels } from '../models/constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\n\nfunction DemoComponent_h4_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h4\");\n    i0.ɵɵtext(1, \"Processing, please wait...\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction DemoComponent_div_23_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelement(2, \"br\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const data_r4 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", data_r4, \" \");\n  }\n}\n\nfunction DemoComponent_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, DemoComponent_div_23_p_1_Template, 3, 1, \"p\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const choice_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.getText(choice_r2.text));\n  }\n}\n\nexport let DemoComponent = /*#__PURE__*/(() => {\n  class DemoComponent {\n    constructor() {\n      this.gptModels = gptModels;\n      this.promptText = '';\n      this.showSpinner = false;\n    }\n\n    ngOnInit() {}\n\n    checkResponse() {\n      this.invokeGPT();\n    }\n\n    getText(data) {\n      return data.split('\\n').filter(f => f.length > 0);\n    }\n\n    invokeGPT() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this.promptText.length < 2) return;\n\n        try {\n          _this.response = undefined;\n          let configuration = new Configuration({\n            apiKey: environment.apiKey\n          });\n          let openai = new OpenAIApi(configuration);\n          let requestData = {\n            model: 'text-davinci-003',\n            prompt: _this.promptText,\n            temperature: 0.95,\n            max_tokens: 150,\n            top_p: 1.0,\n            frequency_penalty: 0.0,\n            presence_penalty: 0.0\n          };\n          _this.showSpinner = true;\n          let apiResponse = yield openai.createCompletion(requestData);\n          _this.response = apiResponse.data;\n          _this.showSpinner = false;\n        } catch (error) {\n          _this.showSpinner = false; // Consider adjusting the error handling logic for your use case\n\n          if (error.response) {\n            console.error(error.response.status, error.response.data);\n          } else {\n            console.error(`Error with OpenAI API request: ${error.message}`);\n          }\n        }\n      })();\n    }\n\n    generatePrompt(animal) {\n      const capitalizedAnimal = animal[0].toUpperCase() + animal.slice(1).toLowerCase();\n      return `Suggest three names for an animal that is a superhero.\n  Animal: Cat\n  Names: Captain Sharpclaw, Agent Fluffball, The Incredible Feline\n  Animal: Dog\n  Names: Ruff the Protector, Wonder Canine, Sir Barks-a-Lot\n  Animal: ${capitalizedAnimal}\n  Names:`;\n    }\n\n  }\n\n  DemoComponent.ɵfac = function DemoComponent_Factory(t) {\n    return new (t || DemoComponent)();\n  };\n\n  DemoComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DemoComponent,\n    selectors: [[\"app-demo\"]],\n    decls: 25,\n    vars: 3,\n    consts: [[1, \"container\"], [1, \"row\"], [1, \"col-md-6\"], [1, \"form-group\"], [\"rows\", \"10\", \"placeholder\", \"Enter your prompt here\", \"cols\", \"6\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [\"class\", \"responseStyle\", 4, \"ngFor\", \"ngForOf\"], [1, \"responseStyle\"]],\n    template: function DemoComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \" My Demo Project: \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\")(4, \"p\");\n        i0.ɵɵtext(5, \"This is a demo app to see how powerful ChatGPT answers your questions to technology. \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(6, \"hr\");\n        i0.ɵɵelementStart(7, \"div\", 1)(8, \"div\", 2)(9, \"div\", 3)(10, \"h3\");\n        i0.ɵɵtext(11, \"Your Question?\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"hr\");\n        i0.ɵɵelementStart(13, \"textarea\", 4);\n        i0.ɵɵlistener(\"ngModelChange\", function DemoComponent_Template_textarea_ngModelChange_13_listener($event) {\n          return ctx.promptText = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(14, \"div\");\n        i0.ɵɵelement(15, \"br\");\n        i0.ɵɵelementStart(16, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function DemoComponent_Template_button_click_16_listener() {\n          return ctx.checkResponse();\n        });\n        i0.ɵɵtext(17, \" Response \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(18, \"div\", 2)(19, \"h3\");\n        i0.ɵɵtext(20, \"Response from ChatGPT\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(21, \"hr\");\n        i0.ɵɵtemplate(22, DemoComponent_h4_22_Template, 2, 0, \"h4\", 6);\n        i0.ɵɵtemplate(23, DemoComponent_div_23_Template, 2, 1, \"div\", 7);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(24, \"br\");\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(13);\n        i0.ɵɵproperty(\"ngModel\", ctx.promptText);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngIf\", ctx.showSpinner);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.response == null ? null : ctx.response.choices);\n      }\n    },\n    dependencies: [i1.NgForOf, i1.NgIf, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel]\n  });\n  return DemoComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}